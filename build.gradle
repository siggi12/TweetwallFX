/*
 * The MIT License
 *
 * Copyright 2014-2017 TweetWallFX
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        jcenter()
    }
    
    dependencies {
        classpath group: 'cz.kubacki.gradle.plugins', name: 'gradle-nbm-plugin', version: '1.17.0', {
            // Workaround for bad transitive dependencies
            exclude group:'org.slf4j', module:'slf4j-simple'
            exclude group:'org.gradle', module:'gradle-tooling-api' // was version 2.7 
        }
        classpath group: 'gradle.plugin.com.github.spotbugs', name: 'gradlePlugin', version: '1.6.0'
        classpath group: 'com.netflix.nebula', name: 'gradle-info-plugin', version: '3.+'
        // VCS dependency required by plugin 'gradle-info-plugin'
        classpath group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '3.+'
        gradleApi()
    }
}

apply plugin: 'build-dashboard'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'nebula.info'
    
    group = 'org.tweetwallfx'
    version = '1.0'
    
    repositories {
        jcenter()
    }
    
    dependencies {
        testCompile group: 'junit', name: 'junit', version: versionJUnit
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
    }
    
    jar {
        manifest.attributes provider: 'gradle'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:all'
        options.compilerArgs << '-Werror'
        options.compilerArgs << '-proc:none'
    }
    
    spotbugs {
        ignoreFailures = false
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        
        // Workaround to bug https://github.com/spotbugs/spotbugs/issues/440
        def sourceSetName = (name - 'spotbugs').uncapitalize()
        dependsOn( sourceSets[sourceSetName].classesTaskName)
            
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
    
    tasks.withType(JavaExec) {
        jvmArgs '-XX:+IgnoreUnrecognizedVMOptions'
        jvmArgs '--add-modules java.xml.bind'
    }
}

description = 'TweetWallFX'

task createFolders(description: 'Creates the folders for the projects and sourceSets should they not exist.') doLast {
    rootProject.allprojects.each {p ->
        if (!p.getProjectDir().isDirectory()) {
            println 'Creating project folder: ' + p.getProjectDir()
            p.getProjectDir().mkdirs()
        }
        
        if (p.hasProperty('sourceSets')) {
            p.sourceSets*.allSource*.srcDirs*.each { File srcDir ->
                if (!srcDir.isDirectory()) {
                    println 'Creating source folder: ' + srcDir
                    srcDir.mkdirs()
                }
            }
        }
    }
}

task ('runDevoxx', dependsOn: ':TweetWallFX-Devoxx:run')
task ('runDevoxx2015', dependsOn: ':TweetWallFX-Devoxx-2015:run')
task ('runDevoxx2017US', dependsOn: ':TweetWallFX-Devoxx-2017-US:run')
task ('runDevoxx2017FR', dependsOn: ':TweetWallFX-Devoxx-2017-FR:run')
task ('runDevoxx2017BE-Exhibition', dependsOn: ':devoxx-2017-be:Exhibition:run')
task ('runDevoxx2017BE-Cinema', dependsOn: ':devoxx-2017-be:Cinema:run')
task ('runJavaOne', dependsOn: ':TweetWallFX-JavaOne:run')
task ('runNetBeans', dependsOn: ':TweetWallFX-NetBeans:run')
